ThingDoc is a clever things comment parser.

It uses syntax similar to Javadoc and is able to generate:

  * BoM text file
  * HTML documentation
  * TeX documentation
  * Wiki documentation (suitable for the reprap.org wiki)
  * Dependency tree in text-mode and using GraphViz

For more information check our wiki at: http://thingdoc.org/

Marking Up Your Design with ThingDoc
====

When run, ThingDoc automatically parses text files with .scad and .tdoc extensions,
looking for its control keywords, detailed below.

Common keywords
----
@root - This is a mandatory and unique keyword that indicates the top most level of the part or assembly
@id - A keyword to assign a unique id number to a part
@name - The name of a part
@desc - Description of a part
@image - An image of a part, given as a filename with an extension

Less common keywords
----



			elif key == '@name':
				thing.name = value

			elif key == '@common':
				thing.common = True
			elif key == '@assembled':
				thing.assembled = True
			elif key == '@since':
				thing.since = value
			elif key == '@category':
				thing.category = value
			elif key == '@type':
				thing.type = value
			elif key == '@step':
				m = re.match('(.*)\[\[(.*)\]\]', value)
				if m:
					thing.step.append( {'text': m.group(1).strip(), 'img': m.group(2).strip()} )
				else:
					thing.step.append( {'text': value} )
			elif key == '@comment':
				thing.comment.append(value)
			elif key == '@image':
				thing.image = value
			elif key == '@using':

		self.common = False     # is this thing common?
		self.assembled = False  # is this thing assembled?
		self.category = ''      # category of the thing
		self.type = ''          # type of the thing (more detailed than category, e.g. RP, fastener, etc)
		self.step = []          # assembly instructions (aka steps)
		self.since = ''         # since when does the thing exist (can be YYYY-MM-DD or some tag, e.g. "Mendel")
		self.comment = []       # comments
		self.image = None       # thing image (filename with extension)
		self.using = {}         # dict of dependencies (id: cnt)
		self.price = None       # price of the thing (in $) - experimental
		self.weight = None      # weight of the thing (in grams) - experimental
		self.time = None        # how long does it take to assemble the part (in minutes) - experimental
		self.desc = []          # description of the thing
		
		
Command Line Usage
====
	parser = OptionParser(
		version = 'ThingDoc ' + VERSION,
		epilog = 'If none of --bom, --html, --tex, --wiki are provided then all 4 types are generated.')
	parser.add_option('-i', '--indir', dest = 'indir', default = '.', help = 'start scanning in INDIR directory (current by default)', metavar = 'INDIR')
	parser.add_option('-o', '--outdir', dest = 'outdir', default = 'docs', help = 'use OUTDIR as output directory ("docs" by default)', metavar = 'OUTDIR')
	parser.add_option('--imagedir', dest = 'imagedir', default = 'images', help = 'use IMAGEDIR directory (relative to OUTDIR) to look for images used in HTML and TeX ("images" by default)', metavar = 'IMAGEDIR')
	parser.add_option('-l', '--lint', dest = 'lint', default = None, help = 'check syntax in FILE and exit', metavar = 'FILE')
	parser.add_option('-b', '--bom', action = 'store_true', dest = 'bom', default = False, help = 'generate Bill of Materials')
	parser.add_option('-m', '--html', action = 'store_true', dest = 'html', default = False, help = 'generate HTML (markup) documentation')
	parser.add_option('-t', '--tex', action = 'store_true', dest = 'tex', default = False, help = 'generate TeX documentation')
	parser.add_option('-w', '--wiki', action = 'store_true', dest = 'wiki', default = False, help = 'generate Wiki documentation')
	parser.add_option('-p', '--print', action = 'store_true', dest = 'tree', default = False, help = 'print tree of things and exit (text mode)')
	parser.add_option('-g', '--graph', action = 'store_true', dest = 'graphviz', default = False, help = 'generate graphviz document')
	parser.add_option('-x', '--parse-only', type='string', action='callback', callback=parse_only)
	
	
Examples
====

Example 1
----

Example 2
----
