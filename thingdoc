#!/usr/bin/env python
#
# ThingDoc - things comment parser - http://thingdoc.org/
# Copyright (C) 2011 Josef Prusa <iam@josefprusa.cz>
# Copyright (C) 2011 Pavol Rusnak <stick@gk2.sk>
# See the file AUTHORS for all contributions
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

VERSION = '1.0'

import os
import re
import shutil
import sys
import time
from jinja2 import Environment, FileSystemLoader
from optparse import OptionParser

class Thing:

	def __init__(self):
		self.id = None          # unique id, root has id = 0 (numeric) which cannot be overriden
		self.name = None        # name of the thing
		self.common = False     # is this thing common?
		self.assembled = False  # is this thing assembled?
		self.category = ''      # category of the thing
		self.type = ''          # type of the thing (more detailed than category, e.g. RP, fastener, etc)
		self.step = []          # assembly instructions (aka steps)
		self.since = ''         # since when does the thing exist (can be YYYY-MM-DD or some tag, e.g. "Mendel")
		self.comment = []       # comments
		self.image = None       # thing image (filename with extension)
		self.using = {}         # dict of dependencies (id: cnt)
		self.price = None       # price of the thing (in $) - experimental
		self.weight = None      # weight of the thing (in grams) - experimental
		self.time = None        # how long does it take to assemble the part (in minutes) - experimental
		self.desc = []          # description of the thing


class Global:

	pass


def warning(string):
	print >> sys.stderr, 'Warning:', string


def error(string):
	print >> sys.stderr, 'Error:', string


def fatal(string):
	print >> sys.stderr, 'Fatal:', string
	sys.exit(1)


def process_file(absname, things):

	try:
		f = open(absname, 'r')
	except IOError:
		fatal('Cannot open file %s' % absname)

	success = True
	thing = None
	linenum = 0
	for line in f:
		linenum += 1
		if line.startswith('/**'):
			if thing:
				error('Start of the comment (/**) found but the previous one is still open (%s:%d)' % (absname, linenum))
				success = False
			thing = Thing()
			continue
		if line.startswith(' */'):
			if not thing:
				error('End of the comment ( */) found but there is no previous open one (%s:%d)' % (absname, linenum))
				success = False
				continue
			if not thing.id:
				error('Missing mandatory attribute @id (%s:%d)' % (absname, linenum))
				success = False
			if not thing.name:
				error('Missing mandatory attribute @name (%s:%d)' % (absname, linenum))
				success = False
			if thing.id and thing.name:
				if thing.id in things:
					if thing.id == 1:
						fatal('More than one @root detected!')
					else:
						error("Duplicate thing id: '%s' (%s:%d)" % (thing.id, absname, linenum))
						success = False
				else:
					things[ thing.id ] = thing
			thing = None
			continue
		if not thing:
			continue  # not in a comment
		if not line.startswith(' * '):
			if line.rstrip() != ' *': # ignore lines ' *'
				error('Comment line does not start with a " * " (%s:%d)' % (absname, linenum))
				success = False
			continue
		(key, _, value) = line[3:].strip().partition(' ')
		if   key == '@id':
			thing.id = value
		elif key == '@name':
			thing.name = value
		elif key == '@root':
			thing.id = 1
		elif key == '@common':
			thing.common = True
		elif key == '@assembled':
			thing.assembled = True
		elif key == '@since':
			thing.since = value
		elif key == '@category':
			thing.category = value
		elif key == '@type':
			thing.type = value
		elif key == '@step':
			m = re.match('(.*)\[\[(.*)\]\]', value)
			if m:
				thing.step.append( {'text': m.group(1).strip(), 'img': m.group(2).strip()} )
			else:
				thing.step.append( {'text': value} )
		elif key == '@comment':
			thing.comment.append(value)
		elif key == '@image':
			thing.image = value
		elif key == '@using':
			(cnt, _, id) = value.partition(' ')
			try:
				cnt = int(cnt)
			except:
				id = cnt
				cnt = 1
			if id in thing.using:
				thing.using[id] += cnt
			else:
				thing.using[id] = cnt
		elif key == '@price':
			thing.price = float(value)
		elif key == '@weight':
			thing.weight = float(value)
		elif key == '@time':
			thing.weight = float(time)
		elif key.startswith('@'):
			error('Unknown tag %s (%s:%d)' % (key, absname, linenum))
			success = False
		else:
			thing.desc.append(key + ' ' + value)
	f.close()
	return success


def generate_tree(indir):

	things = {}
	for root, dirs, files in os.walk(os.path.abspath(indir)):
		dirs[:] = [d for d in dirs if not d.startswith('.')]
		for name in files:
			# skip if the file is not supported document
			if not os.path.splitext(name)[1] in ['.scad', '.tdoc']:
				continue
			absname = os.path.join(root, name)
			process_file(absname, things)
	return things


def check_tree(tree, imagedir):

	if not 1 in tree:
		fatal('Nothing was declared as @root')

	# do BFS on dependency graph
	used = []
	missing = []
	queue = [1]
	while queue:
		thing = queue.pop()
		if not thing in tree.iterkeys():
			if not thing in missing:
				missing.append(thing)
			continue
		if not thing in used:
			used.append(thing)
			queue += tree[thing].using.keys()
		# do various alterations of items
		if os.path.exists('%s/%s.jpg' % (imagedir, thing)):
			tree[thing].image = '%s.jpg' % thing
		elif os.path.exists('%s/%s.png' % (imagedir, thing)):
			tree[thing].image = '%s.png' % thing

	# handle unused things
	for thing in tree.iterkeys():
		if not thing in used:
			warning("Thing '%s' is defined but unused" % thing)

	valid = True

	# handle undefined things
	for thing in missing:
		parents = []
		for k, v in tree.iteritems():
			if thing in v.using:
				parents.append(k == 1 and '@root' or ("'" + k + "'"))
		parents.sort()
		error("Thing '%s' is not defined and required by: %s" % (thing, ', '.join(parents)))
		valid = False

	# detect oriented cycles
	todo = tree.keys()
	while todo:
		node = todo.pop()
		stack = [node]
		while stack:
			top = stack[-1]
			for node in tree[top].using:
				if node in stack:
					error("Oriented cycle detected: '%s'" % ("' -> '".join(stack[stack.index(node):] + [node])))
					valid = False
					todo = []
					stack = []
					break
				if node in todo:
					stack.append(node)
					todo.remove(node)
					break
			else:
				node = stack.pop()

	if not valid:
		fatal('Tree validation failed, see errors above')


def print_tree(tree):

	queue = [(1, 0, -1)]
	while queue:
		(id, cnt, level) = queue.pop(0)
		if id == 1:
			print '@root', '(' + tree[id].name + ')'
		else:
			print level * '  ', '-', str(cnt) + 'x', tree[id].id, '(' + tree[id].name + ')'
		queue = map(lambda (id, cnt): (id, cnt, level + 1), tree[id].using.iteritems()) + queue


def graphviz_tree(tree, bom):

	print 'digraph thingdoc {'
	print '\tnode [style=filled, colorscheme=pastel19];'
	print '\tedge [dir=back];'
	queue = [(1, 0, ['!'])]
	while queue:
		(id, cnt, path) = queue.pop(0)
		if id == 1:
			print '\t"!"[label="%s", fillcolor=9];' % tree[id].name
		else:
			name = tree[id].name
			if cnt > 1:
				name = '%dx %s' % (cnt, name)
			if tree[id].common:
				color = 1
			elif not tree[id].category:
				color = 8
			else:
				i = bom.keys().index(tree[id].category)
				color = (i % 6) + 2 # 2-7
			print '\t"%s"[label="%s", fillcolor=%d];' % ('/'.join(path), name, color)
			print '\t"%s" -> "%s";' % ('/'.join(path[:-1]), '/'.join(path))
		queue = map(lambda (id, cnt): (id, cnt, path + [k]), tree[id].using.iteritems()) + queue
	print '}'


def extract_bom(tree):

	queue = [ tree[1].using.items() ]
	bom = {}
	while queue:
		using = queue.pop(0)
		for (id, cnt) in using:
			thing = tree[id]
			if thing.category in bom:
				if id in bom[thing.category]:
					bom[thing.category][id] += cnt
				else:
					bom[thing.category][id] = cnt
			else:
				if thing.category:
					bom[thing.category] = {id: cnt}
			queue += [ map(lambda (a,b): (a,b*cnt), thing.using.items()) ]
	return bom


def extract_instructions(tree, id):

	instr = []
	for cid in tree[id].using:
		instr += extract_instructions(tree, cid)
	if tree[id].step:
		instr.append( [id] + tree[id].step )
	return instr


def generate_bom(tree, bom):

	try:
		f = open('bom.txt', 'w')
	except:
		error('Cannot create bom.txt')
		return

	template = Global.jinja.get_template('bom.txt')
	f.write(template.render(title = tree[1].name, start = Global.start, tree = tree, bom = bom))
	f.close()


def generate_html(tree, bom, instr, imagedir):

	try:
		f = open('thingdoc.html', 'w')
	except:
		error('Cannot create thingdoc.html')
		return

	# copy static files
	for i in ('iphone.css', 'jquery.js', 'logo.png', 'thingdoc.css', 'thingdoc.js'):
		shutil.copy(Global.path + '/html/' + i, i)

	template = Global.jinja.get_template('thingdoc.html')
	f.write(template.render(title = tree[1].name, titleimg = tree[1].image, start = Global.start, tree = tree, bom = bom, instr = instr, imagedir = imagedir))
	f.close()


def generate_wiki(tree, bom):

	try:
		f = open('thingdoc.wiki', 'w')
	except:
		error('Cannot create thingdoc.wiki')
		return

	template = Global.jinja.get_template('thingdoc.wiki')
	f.write(template.render(tree = tree, bom = bom))
	f.close()


def cleanup_tex(string):
	if isinstance(string, (list, tuple)):
		return tuple(map(lambda x: isinstance(x, str) and x.replace('&', '\\&') or x, string))
	else:
		return string.replace('&', '\\&')


def generate_tex(tree, bom, instr, imagedir):

	try:
		f = open('thingdoc.tex', 'w')
	except:
		error('Cannot create thingdoc.tex')
		return

	f.write("""\\documentclass[11pt]{article}
\\usepackage[latin2]{inputenc}
\\usepackage{a4wide}
\\usepackage{graphicx}
\\usepackage{hyperref}
\\hypersetup{colorlinks=true,linkcolor=blue}
\\title{%s documentation}
\\author{ThingDoc}
\\begin{document}
\\maketitle
%s
""" % cleanup_tex((tree[1].name, '\n'.join(tree[1].desc))))

	if tree[1].image:
		f.write('\\begin{center}\n')
		f.write('\\includegraphics[width=8cm]{%s/%s}\n' % cleanup_tex((imagedir, tree[1].image)))
		f.write('\\end{center}\n')

	f.write("""\\newpage
\\tableofcontents
\\newpage
""")

	# BOM
	f.write('\\section{Bill of materials}\n')
	f.write('List of things you need to build the machine divided by categories\n')
	for category in bom:
		f.write('\\subsection{%s}\n\\begin{itemize}\n' % cleanup_tex(category))
		for k, v in bom[category].iteritems():
			if not tree[k].common:
				f.write('\\item %dx \\hyperlink{thing_%s}{%s}\n' % cleanup_tex((v, k, tree[k].name)))
			else:
				f.write('\\item %dx %s\n' % cleanup_tex((v, tree[k].name)))
		f.write('\\end{itemize}\n')
	f.write('\\newpage\n')

	# Things overview
	f.write('\\section{Things overview}\n')
	f.write('List of things and their descriptions\n')
	for thing in tree.itervalues():
		if thing.id != 1 and thing.common == False:
			f.write('\\hypertarget{thing_%s}{\\subsection{%s}}\n' % cleanup_tex((thing.id, thing.name)))
			if thing.desc:
				f.write('\n'.join(thing.desc) + '\n')
			if thing.image:
				f.write('\\includegraphics[width=4cm]{%s/%s}\n' % cleanup_tex((imagedir, thing.image)))
			f.write('\n')
	f.write('\\newpage\n')

	# Assembly instructions
	f.write('\\section{Assembly instructions}\n')
	for i in instr:
		f.write('\\subsection{Assemble %s}\n' % tree[i[0]].name)
		if tree[i[0]].using:
			f.write('Things needed:\n')
			f.write('\\begin{itemize}\n')
			for (id, cnt) in tree[i[0]].using.iteritems():
				if not tree[id].common:
					f.write('\\item %dx \\hyperlink{thing_%s}{%s}\n' % (cnt, id, tree[id].name))
				else:
					f.write('\\item %dx %s\n' % (cnt, tree[id].name))
			f.write('\\end{itemize}\n')
		f.write('Steps:\n')
		f.write('\\begin{enumerate}\n')
		for j in i[1:]:
			if isinstance(j, tuple):
				f.write('\\item %s\\\\ \\includegraphics[width=4cm]{%s/%s}\n' % (j[0], imagedir, j[1]))
			else:
				f.write('\\item %s\n' % j)
		f.write('\\end{enumerate}\n')
	f.write('\\newpage\n')

	f.write('\\end{document}\n')


def main():

	parser = OptionParser(
		version = '%prog ' + VERSION,
		epilog = 'If none of --bom, --html, --tex, --wiki are provided then all 4 types are generated.')
	parser.add_option('-i', '--indir', dest = 'indir', default = '.', help = 'start scanning in INDIR directory (current by default)', metavar = 'INDIR')
	parser.add_option('-o', '--outdir', dest = 'outdir', default = 'docs', help = 'use OUTDIR as output directory ("docs" by default)', metavar = 'OUTDIR')
	parser.add_option('--imagedir', dest = 'imagedir', default = 'images', help = 'use IMAGEDIR directory (relative to OUTDIR) to look for images used in HTML and TeX ("images" by default)', metavar = 'IMAGEDIR')
	parser.add_option('-l', '--lint', dest = 'lint', default = None, help = 'check syntax in FILE and exit', metavar = 'FILE')
	parser.add_option('-b', '--bom', action = 'store_true', dest = 'bom', default = False, help = 'generate Bill of Materials')
	parser.add_option('-m', '--html', action = 'store_true', dest = 'html', default = False, help = 'generate HTML (markup) documentation')
	parser.add_option('-t', '--tex', action = 'store_true', dest = 'tex', default = False, help = 'generate TeX documentation')
	parser.add_option('-w', '--wiki', action = 'store_true', dest = 'wiki', default = False, help = 'generate Wiki documentation')
	parser.add_option('-p', '--print', action = 'store_true', dest = 'tree', default = False, help = 'print tree of things and exit (text mode)')
	parser.add_option('-g', '--graph', action = 'store_true', dest = 'graphviz', default = False, help = 'generate graphviz document')

	(options, _) = parser.parse_args()

	if options.lint:
		if process_file(options.lint, {}):
			print 'No syntax errors detected'
			sys.exit(0)
		else:
			sys.exit(1)

	if not options.bom and not options.html and not options.tex and not options.wiki:
		options.bom = options.html = options.tex = options.wiki = True

	Global.start = time.strftime("%Y/%m/%d %H:%M:%S")
	Global.path = os.path.dirname(os.path.abspath(__file__))
	Global.jinja = Environment(loader = FileSystemLoader(Global.path + '/templates/'))

	tree = generate_tree(options.indir)

	try:
		os.makedirs(options.outdir)
	except:
		pass
	try:
		os.chdir(options.outdir)
	except:
		fatal('Cannot switch to OUTDIR: %s' % options.outdir)

	check_tree(tree, options.imagedir)

	bom = extract_bom(tree)
	instr = extract_instructions(tree, 1)

	if options.tree:
		print_tree(tree)
		return

	if options.graphviz:
		graphviz_tree(tree, bom)
		return

	if options.bom:
		generate_bom(tree, bom)
	if options.html:
		generate_html(tree, bom, instr, options.imagedir)
	if options.tex:
		generate_tex(tree, bom, instr, options.imagedir)
	if options.wiki:
		generate_wiki(tree, bom)

	print 'All Done!'


if __name__ == '__main__':
	main()
